[{"path":"flystar233.github.io/outqrf/articles/outqrf.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using outqrf","text":"outqrf R package used outlier detection. numeric variable regressed onto variables using quantile random forest (QRF). use ranger perform fitting prediction quantile regression forests (QRF). Next, compute rank observed values predicted results’ quantiles. rank observed value exceeds threshold, observed value considered outlier. Since predicted value might distributed across multiple quantiles predicted quantile results, affects location finding observed value. Therefore, also used method similar outForest package compare observed value 50% quantile value determine final quantile result.","code":""},{"path":[]},{"path":"flystar233.github.io/outqrf/articles/outqrf.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Using outqrf","text":"","code":"library(outqrf) #Generate data with outliers in numeric columns irisWithOutliers <- generateOutliers(iris, p = 0.05,seed =2024) # Find outliers by quantile random forest regressions out <- outqrf(irisWithOutliers,quantiles_type=400) #>  #> Outlier identification by quantiles random forests #>  #>   Variables to check:        Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>   Variables used to check:   Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species #>  #>   Checking: Sepal.Length  Sepal.Width  Petal.Length  Petal.Width out$outliers #>    row          col observed predicted   rank #> 1   32 Sepal.Length     14.9      5.40 0.9975 #> 2   35 Sepal.Length     -1.8      4.60 0.0025 #> 3   84 Sepal.Length     11.5      6.80 0.9975 #> 4  129 Sepal.Length     -5.6      6.30 0.0025 #> 5   49  Sepal.Width     10.8      3.85 0.9975 #> 6  131  Sepal.Width     -2.1      2.70 0.0025 #> 7  137  Sepal.Width     11.5      3.20 0.9975 #> 8   36 Petal.Length     12.8      1.60 0.9975 #> 9   73 Petal.Length    -17.2      4.40 0.0025 #> 10 107 Petal.Length     13.7      5.60 0.9975 #> 11 123 Petal.Length     -9.0      5.20 0.0025 #> 12 140 Petal.Length     13.5      5.80 0.9975 #> 13  10  Petal.Width    -11.8      0.20 0.0025 #> 14  14  Petal.Width     -6.3      0.20 0.0025 #> 15  34  Petal.Width      7.6      0.40 0.9975 #> 16  66  Petal.Width      7.0      2.00 0.9950 #> 17 113  Petal.Width     -6.1      1.80 0.0025"},{"path":"flystar233.github.io/outqrf/articles/outqrf.html","id":"evaluation-on-diamonds-big-dataset","dir":"Articles","previous_headings":"","what":"Evaluation on diamonds (Big Dataset)","title":"Using outqrf","text":"","code":"library(outForest) library(outqrf) library(tidyverse) data <- diamonds|>select(price,carat,cut,color,clarity) data2 <- outqrf::generateOutliers(data, p = 0.001,seed =2024) # 108 qrf <- outqrf(data2,num.threads=8,quantiles_type=400) #>  #> Outlier identification by quantiles random forests #>  #>   Variables to check:        price, carat #>   Variables used to check:   price, carat, cut, color, clarity #>  #>   Checking: price  carat #The process can be slow because it needs to predict the value at 400|1000 quantiles for each observation.  evaluateOutliers(data,data2,qrf$outliers) #>     Actual  Predicted      Cover   Coverage Efficiency  #>     108.00     369.00     103.00       0.95       0.28 library(outForest) library(outqrf) library(tidyverse) data <- diamonds|>select(price,carat,cut,color,clarity) data2 <- outqrf::generateOutliers(data, p = 0.001,seed =2024) rf <- outForest(data2) #>  #> Outlier identification by random forests #>  #>   Variables to check:        price, carat #>   Variables used to check:   price, carat, cut, color, clarity #>  #>   Checking: price  carat evaluateOutliers(data,data2,rf$outliers) #>     Actual  Predicted      Cover   Coverage Efficiency  #>     108.00     692.00     104.00       0.96       0.15"},{"path":"flystar233.github.io/outqrf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tengfei Xu. Author, maintainer.","code":""},{"path":"flystar233.github.io/outqrf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xu T (2024). outqrf: Find outlier quantile random forests. R package version 0.0.3, flystar233.github.io/outqrf, https://github.com/flystar233/outqrf.","code":"@Manual{,   title = {outqrf: Find the outlier by quantile random forests},   author = {Tengfei Xu},   year = {2024},   note = {R package version 0.0.3, flystar233.github.io/outqrf},   url = {https://github.com/flystar233/outqrf}, }"},{"path":[]},{"path":"flystar233.github.io/outqrf/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Find the outlier by quantile random forests","text":"outqrf R package used outlier detection. numeric variable regressed onto variables using quantile random forest (QRF). use ranger perform fitting prediction quantile regression forests (QRF). Next, compute rank observed values predicted results’ quantiles. rank observed value exceeds threshold, observed value considered outlier. Since predicted value might distributed across multiple quantiles predicted quantile results, affects location finding observed value. Therefore, also used method similar outForest package compare observed value 50% quantile value determine final quantile result.","code":""},{"path":"flystar233.github.io/outqrf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Find the outlier by quantile random forests","text":"","code":"# Development version devtools::install_github(\"flystar233/outqrf\")"},{"path":"flystar233.github.io/outqrf/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Find the outlier by quantile random forests","text":"first generate data set 5% outliers values numeric column.","code":"#Generate data with outliers in numeric columns irisWithOutliers <- generateOutliers(iris, p = 0.05,seed =2024) # Find outliers by quantile random forest regressions out <- outqrf(irisWithOutliers,quantiles_type=400) out$outliers #    row          col    observed predicted  rank # 1   32 Sepal.Length  14.9308229       5.4 0.999 # 2   35 Sepal.Length  -1.8135664       4.6 0.001 # 3   84 Sepal.Length  11.4849203       6.3 0.999 # 4  129 Sepal.Length  -5.6021049       6.2 0.001 # 5   49  Sepal.Width  10.7927619       3.7 0.999 # 6   90  Sepal.Width  -0.7648333       2.4 0.001 # 7  131  Sepal.Width  -2.1389311       2.7 0.001 # 8  137  Sepal.Width  11.4992802       3.2 0.999 # 9   36 Petal.Length  12.8033669       1.6 0.999 # 10  73 Petal.Length -17.1905846       4.4 0.001 # 11 107 Petal.Length  13.6672827       5.6 0.999 # 12 123 Petal.Length  -8.9717894       5.1 0.001 # 13 140 Petal.Length  13.5214560       5.7 0.999 # 14  10  Petal.Width -11.8406790       0.2 0.001 # 15  14  Petal.Width  -6.3030372       0.2 0.003 # 16  34  Petal.Width   7.5843853       0.4 0.999 # 17  66  Petal.Width   6.9828746       2.0 0.993 # 18 113  Petal.Width  -6.0696862       1.5 0.001"},{"path":"flystar233.github.io/outqrf/index.html","id":"evaluation-on-iris-small-dataset","dir":"","previous_headings":"","what":"Evaluation on iris (Small Dataset)","title":"Find the outlier by quantile random forests","text":"Rplot","code":"irisWithOutliers <- outqrf::generateOutliers(iris, p = 0.05,seed =2024) # 32 qrf <- outqrf(irisWithOutliers,quantiles_type=400) rf <- outForest(irisWithOutliers)  evaluateOutliers(iris,irisWithOutliers,qrf$outliers) #Actual  Predicted      Cover   Coverage Efficiency # 32.00      17.00      17.00       0.53       1.00 evaluateOutliers(iris,irisWithOutliers,rf$outliers) #Actual  Predicted      Cover   Coverage Efficiency # 32.00      19.00      19.00       0.59       1.00 boxplot_num <- 0 # find outliers use boxplot for (i in names(irisWithOutliers)[sapply(irisWithOutliers,is.numeric)]){   q1 <- quantile(irisWithOutliers[,i], 0.25)   q3 <- quantile(irisWithOutliers[,i], 0.75)   iqr <- q3 - q1   lower_bound <- q1 - 1.5 * iqr   upper_bound <- q3 + 1.5 * iqr   num <- sum(irisWithOutliers[,i]<lower_bound|irisWithOutliers[,i]>upper_bound)   boxplot_num<-boxplot_num+num } # 43"},{"path":"flystar233.github.io/outqrf/index.html","id":"evaluation-on-diamonds-big-dataset","dir":"","previous_headings":"","what":"Evaluation on diamonds (Big Dataset)","title":"Find the outlier by quantile random forests","text":"","code":"data <- diamonds|>select(price,carat,cut,color,clarity) data2 <- outqrf::generateOutliers(data, p = 0.001,seed =2024) # 108 qrf <- outqrf(data2,num.threads=8,quantiles_type=400) # The process can be slow because it needs to predict the value at 400|1000 quantiles for each observation. rf <- outForest(data2)  evaluateOutliers(data,data2,qrf$outliers) #Actual  Predicted      Cover   Coverage Efficiency #108.00     369.00     103.00       0.95       0.28 evaluateOutliers(data,data2,rf$outliers) #Actual  Predicted      Cover   Coverage Efficiency #108.00     687.00     104.00       0.96       0.15"},{"path":"flystar233.github.io/outqrf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 outqrf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"flystar233.github.io/outqrf/reference/evaluateOutliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Outliers — evaluateOutliers","title":"Evaluate Outliers — evaluateOutliers","text":"function evaluates performance outlier detection algorithm.","code":""},{"path":"flystar233.github.io/outqrf/reference/evaluateOutliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Outliers — evaluateOutliers","text":"","code":"evaluateOutliers(original_data, anomaly_data, anomaly_result)"},{"path":"flystar233.github.io/outqrf/reference/evaluateOutliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Outliers — evaluateOutliers","text":"original_data data frame containing original data. anomaly_data data frame containing anomaly data. anomaly_result data frame containing predicted anomalies.","code":""},{"path":"flystar233.github.io/outqrf/reference/evaluateOutliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Outliers — evaluateOutliers","text":"data frame containing evaluation metrics.","code":""},{"path":"flystar233.github.io/outqrf/reference/evaluateOutliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Outliers — evaluateOutliers","text":"","code":"anomaly_data <- generateOutliers(iris, p = 0.05, sd_factor = 5, seed = 123) qrf<- outqrf(anomaly_data) #>  #> Outlier identification by quantiles random forests #>  #>   Variables to check:\t\tSepal.Length, Sepal.Width, Petal.Length, Petal.Width #>   Variables used to check:\tSepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species #>  #>   Checking: Sepal.Length  Sepal.Width  Petal.Length  Petal.Width   evaluateOutliers(iris,anomaly_data,qrf$outliers) #>     Actual  Predicted      Cover   Coverage Efficiency  #>       32.0       16.0       16.0        0.5        1.0"},{"path":"flystar233.github.io/outqrf/reference/find_index.html","id":null,"dir":"Reference","previous_headings":"","what":"find the closest index — find_index","title":"find the closest index — find_index","text":"function finds closest index given value vector.","code":""},{"path":"flystar233.github.io/outqrf/reference/find_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find the closest index — find_index","text":"","code":"find_index(x, y)"},{"path":"flystar233.github.io/outqrf/reference/find_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find the closest index — find_index","text":"x vector y value","code":""},{"path":"flystar233.github.io/outqrf/reference/find_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find the closest index — find_index","text":"index closest value vector","code":""},{"path":"flystar233.github.io/outqrf/reference/find_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find the closest index — find_index","text":"","code":"find_max_index(c(1, 2, 3, 4, 5), 3.5) #> Error in find_max_index(c(1, 2, 3, 4, 5), 3.5): could not find function \"find_max_index\""},{"path":"flystar233.github.io/outqrf/reference/generateOutliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds Outliers — generateOutliers","title":"Adds Outliers — generateOutliers","text":"Adds Outliers","code":""},{"path":"flystar233.github.io/outqrf/reference/generateOutliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds Outliers — generateOutliers","text":"","code":"generateOutliers(data, p = 0.05, sd_factor = 5, seed = NULL)"},{"path":"flystar233.github.io/outqrf/reference/generateOutliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds Outliers — generateOutliers","text":"data data.frame. p Proportion outliers add data. sd_factor outlier generated shifting original value realization normal random variable sd_factor times original sample standard deviation. seed integer seed.","code":""},{"path":"flystar233.github.io/outqrf/reference/generateOutliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds Outliers — generateOutliers","text":"data outliers.","code":""},{"path":"flystar233.github.io/outqrf/reference/generateOutliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds Outliers — generateOutliers","text":"","code":"generateOutliers(iris, p = 0.05, sd_factor = 5, seed = 123) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            2.8         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3       -14.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         2.8          1.7         0.2     setosa #> 22           5.1         3.7         21.2         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4         -1.7         0.2     setosa #> 26          -1.4         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          8.3         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9        -2.2          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43          10.9         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4        -2.7     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2         -1.0         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         6.5 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0        10.9          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2         -3.9         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72          -7.7         6.6          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.7 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         1.6          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.9         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81          15.3         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0         16.4         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         1.5          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3        -6.8 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7        -0.2          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         2.8 versicolor #> 99           0.2         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1        10.2  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          8.0         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8         -6.3         0.3  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          4.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         1.9          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica"},{"path":"flystar233.github.io/outqrf/reference/get_quantily_value.html","id":null,"dir":"Reference","previous_headings":"","what":"get numberic value from string — get_quantily_value","title":"get numberic value from string — get_quantily_value","text":"function extracts numeric value string.","code":""},{"path":"flystar233.github.io/outqrf/reference/get_quantily_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get numberic value from string — get_quantily_value","text":"","code":"get_quantily_value(name)"},{"path":"flystar233.github.io/outqrf/reference/get_quantily_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get numberic value from string — get_quantily_value","text":"name string","code":""},{"path":"flystar233.github.io/outqrf/reference/get_quantily_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get numberic value from string — get_quantily_value","text":"numeric value","code":""},{"path":"flystar233.github.io/outqrf/reference/get_quantily_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get numberic value from string — get_quantily_value","text":"","code":"get_quantily_value(\"quantiles = 0.001\") #> [1] 0.001"},{"path":"flystar233.github.io/outqrf/reference/get_right_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"find the right rank — get_right_rank","title":"find the right rank — get_right_rank","text":"function finds right rank response value quantile random forest.","code":""},{"path":"flystar233.github.io/outqrf/reference/get_right_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find the right rank — get_right_rank","text":"","code":"get_right_rank(response, outMatrix, median_outMatrix, rmse_)"},{"path":"flystar233.github.io/outqrf/reference/get_right_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find the right rank — get_right_rank","text":"response vector response values outMatrix matrix values median_outMatrix vector median values rmse_ vector rmse values","code":""},{"path":"flystar233.github.io/outqrf/reference/get_right_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find the right rank — get_right_rank","text":"vector ranks","code":""},{"path":"flystar233.github.io/outqrf/reference/outqrf.html","id":null,"dir":"Reference","previous_headings":"","what":"find outliers — outqrf","title":"find outliers — outqrf","text":"function finds outliers dataset using quantile random forests.","code":""},{"path":"flystar233.github.io/outqrf/reference/outqrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find outliers — outqrf","text":"","code":"outqrf(   data,   quantiles_type = 1000,   threshold = 0.025,   impute = TRUE,   verbose = 1,   ... )"},{"path":"flystar233.github.io/outqrf/reference/outqrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find outliers — outqrf","text":"data data frame quantiles_type '1000':seq(= 0.001, = 0.999, = 0.001), '400':seq(0.0025,0.9975,0.0025) threshold threshold outlier detection impute boolean value indicating whether impute missing values verbose boolean value indicating whether print verbose output ... additional arguments passed ranger function","code":""},{"path":"flystar233.github.io/outqrf/reference/outqrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find outliers — outqrf","text":"object class \"outqrf\" list following elements. Data: Original data set unchanged row order outliers: Compact representation outliers. row corresponds outlier contains following columns: row: Row number outlier col: Variable name outlier observed: value outlier predicted: predicted value outlier rank: Rank outlier outMatrix: Predicted value different quantiles observation r.squared: R-squared value quantile random forest model outMatrix: Predicted value different quantiles observation r.squared: R-squared value quantile random forest model oob.error: --bag error quantile random forest model rmse: RMSE quantile random forest model threshold: Threshold outlier detection","code":""},{"path":"flystar233.github.io/outqrf/reference/outqrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find outliers — outqrf","text":"","code":"iris_with_outliers <- generateOutliers(iris, p=0.05) qrf = outqrf(iris_with_outliers) #>  #> Outlier identification by quantiles random forests #>  #>   Variables to check:\t\tSepal.Length, Sepal.Width, Petal.Length, Petal.Width #>   Variables used to check:\tSepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species #>  #>   Checking: Sepal.Length  Sepal.Width  Petal.Length  Petal.Width   qrf$outliers #>    row          col observed predicted  rank #> 1   26 Sepal.Length     -1.4      4.70 0.001 #> 2   43 Sepal.Length     10.9      5.00 0.999 #> 3   72 Sepal.Length     -7.7      5.50 0.001 #> 4   81 Sepal.Length     15.3      5.70 0.999 #> 5   99 Sepal.Length      0.2      5.00 0.009 #> 6   38  Sepal.Width     -2.2      3.00 0.001 #> 7   63  Sepal.Width     10.9      2.90 0.999 #> 8   97  Sepal.Width     -0.2      2.75 0.001 #> 9   22 Petal.Length     21.2      1.90 0.999 #> 10  35 Petal.Length      8.3      1.50 0.999 #> 11  69 Petal.Length     -3.9      4.00 0.019 #> 12  89 Petal.Length     16.4      4.50 0.999 #> 13  17  Petal.Width    -14.4      0.20 0.001 #> 14  54  Petal.Width      6.5      1.30 0.999 #> 15  94  Petal.Width     -6.8      1.00 0.001 #> 16 110  Petal.Width     10.2      2.20 0.999 evaluateOutliers(iris,iris_with_outliers,qrf$outliers) #>     Actual  Predicted      Cover   Coverage Efficiency  #>       32.0       16.0       16.0        0.5        1.0"}]
