names(qrf$outMatrixs[1])
qrf$outMatrixs[[1]][,500])
qrf$outMatrixs[[1]][,500])
qrf$outMatrixs[[1]][,500]
data.frame(names(qrf$outMatrixs[1]) = qrf$outMatrixs[[1]][,500])
qrf$outMatrixs[[1]][,500]
names(qrf$outMatrixs[1])
names(qrf$outMatrixs[1]) = qrf$outMatrixs[[1]][,500]
names(qrf$outMatrixs[1])
x= names(qrf$outMatrixs[1])
x = qrf$outMatrixs[[1]][,500]
x
x= names(qrf$outMatrixs[1])
x
data.frame(x=qrf$outMatrixs[[1]][,500])
for(i in seq_along(qrf$outMatrixs)){
v = data.frame(qrf$outMatrixs[[i]][,500])
x = merge(x,v)
}
x
data.frame(qrf$outMatrixs[[1]][,500])
a= data.frame(qrf$outMatrixs[[1]][,500])
b= data.frame(qrf$outMatrixs[[2]][,500])
merge(a,b)
xx =merge(a,b)
View(xx)
x
x = data.frame()
x=iris
for(i in seq_along(qrf$outMatrixs)){
v = data.frame(qrf$outMatrixs[[i]][,500])
x = merge(x,v)
}
x
View(x)
a\
a
merge(iris,a)
qrf$outMatrixs$Sepal.Length
qrf$outMatrixs$Sepal.Length[1,1]
qrf$outMatrixs$Sepal.Length[1,1:5]
qrf$outMatrixs$Sepal.Length[1:5,1:5]
qrf$outMatrixs$Sepal.Length[1:5,500]
qrf$outMatrixs[1:5,500]
qrf$outMatrixs[1][1:5,500]
qrf$outMatrixs[[1]][1:5,500]
as.data.frame(qrf$outMatrixs)
xx=qrf$outMatrixs[[1]][1:5,500]
xx=as.data.frame(qrf$outMatrixs[[1]][1:5,500])
View(xx)
xx=as.data.frame(qrf$outMatrixs)
xx=as.data.frame(qrf$outMatrixs[[1]])
View(xx)
xx=as.data.frame(qrf$outMatrixs[[1]][,500])
for (i in seq_along(qrf$outMatrixs)){
print(as.data.frame(qrf$outMatrixs[[i]][,500]))
}
result_df <- data.frame()
for (i in seq_along(qrf$outMatrixs)) {
temp_df <- as.data.frame(qrf$outMatrixs[[i]][,500])
if (nrow(result_df) == 0) {
result_df <- temp_df
} else {
result_df <- cbind(result_df, temp_df)
}
}
View(result_df)
names(qrf$outMatrixs)
names(result_df)=names(qrf$outMatrixs)
ggplot(iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot() +
labs(title = "Sepal Length by Species", x = "Species", y = "Sepal Length") +
theme_minimal()
library(reshape2)
iris_long <- melt(iris, id.vars = "Species", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
names(iris_long)[2] <- "variable"
names(iris_long)[3] <- "value"
iris_long
library(dplyr)
result_df|>mutate('tag'='true')
result_df = result_df|>mutate('tag'='true')
iris_long <- melt(result_df, id.vars = "tag", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
iris_long
View(result_df)
View(iris_long)
ggplot(iris_long, aes(x = variable), y = value)) +geom_boxplot()
ggplot(iris_long, aes(x = variable, y = value)) +geom_boxplot()
result_df2 = result_df|>mutate('tag'='false')
iris_long2 <- melt(result_df2, id.vars = "tag", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
iris_long2
re = rbind(iris_long,iris_long2)
View(re)
ggplot(re, aes(x = variable, y = value,fill=tag)) +geom_boxplot()
names(qrf$outMatrixs)
result_df <- data.frame()
for (i in seq_along(qrf$outMatrixs)) {
temp_df <- as.data.frame(qrf$outMatrixs[[i]][,500])
if (nrow(result_df) == 0) {
result_df <- temp_df
} else {
result_df <- cbind(result_df, temp_df)
}
}
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,"predicted")
View(result_df)
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,predicted)
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,tag = "predicted")
result_df <- data.frame()
for (i in seq_along(qrf$outMatrixs)) {
temp_df <- as.data.frame(qrf$outMatrixs[[i]][,500])
if (nrow(result_df) == 0) {
result_df <- temp_df
} else {
result_df <- cbind(result_df, temp_df)
}
}
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,tag = "predicted")
qrf$Data
numeric_features <- names(iris)[sapply(iris,is.numeric)]
numeric_features
data = data[numeric_features]
data
data = iris[numeric_features]
data
data <- mutate(data,tag = "observed")
data
plot_in <-rbind(result_df,data)
View(plot_in)
library(tidyr)
relig_income
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
plot_in|>pivot_longer(!tag,names_to ="features",values_to ="value" )
ggplot(plot_in, aes(x = features     , y = value,fill=tag)) +geom_boxplot()
plot_in =plot_in|>pivot_longer(!tag,names_to ="features",values_to ="value" )
ggplot(plot_in, aes(x = features     , y = value,fill=tag)) +geom_boxplot()
install.packages("ggpubr")
library(ggpubr)
data("ToothGrowth")
p <- ggboxplot(ToothGrowth, x="supp",
y = "len", color = "supp",
palette = "jco", add = "jitter")
# 添加p值
p + stat_compare_means()
data("ToothGrowth")
ToothGrowth
ggpaired(ToothGrowth, x="supp", y="len",
color="supp", line.color="gray",
line.size=0.4, palette = "jco") +
stat_compare_means(paired = TRUE)
View(ToothGrowth)
ggpaired(plot_in, x="features", y="value",
color="tag", line.color="gray",
line.size=0.4, palette = "jco") +
stat_compare_means(paired = TRUE)
ggpaired(plot_in, x="features", y="value",
color="tag", line.color="gray",
line.size=0.4, palette = "jco")
ggpaired(plot_in, x="features", y="value",
fill="tag", line.color="gray",
line.size=0.4, palette = "jco")
ggpaired(plot_in, x="features", y="value",
fill="tag")
p <- ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "supp", palette = "jco",
add = "jitter")
p
View(plot_in)
p <- ggboxplot(plot_in, x = "features", y = "value",color = "tag", palette = "jco",
add = "jitter")
p
p+stat_compare_means(paired = TRUE)
p
p <- ggpaired(plot_in, x="features", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.4,
facet.by = "tag", short.panel.labs = FALSE)
p
p <- ggpaired(plot_in, x="features", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.4,
facet.by = "features", short.panel.labs = FALSE)
p
p <- ggboxplot(plot_in, x = "features", y = "value",color = "tag", palette = "jco",
add = "jitter")
p
p <- ggpaired(plot_in, x="features", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.4,
facet.by = "tag", short.panel.labs = FALSE)
p
p <- ggboxplot(plot_in, x = "features", y = "value",color = "tag", palette = "jco",
add = "jitter")
p
p <- ggboxplot(plot_in, x = "tag", y = "value",color = "features", palette = "jco",
add = "jitter")
p
p <- ggpaired(plot_in, x="tag", y="value",
color="features", palette = "jco",
line.color = "grey", line.size =0.4,
facet.by = "features", short.panel.labs = FALSE)
p
p <- ggpaired(plot_in, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.4,
facet.by = "features", short.panel.labs = FALSE)
p
p <- ggpaired(plot_in, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)
p
ggpaired(plot_in, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =2,
facet.by = "features", short.panel.labs = FALSE)
ggpaired(plot_in, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.1,
facet.by = "features", short.panel.labs = FALSE)
ggpaired(plot_in, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.1,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)
t.test(iris$Sepal.Length,qrf$outMatrixs$Sepal.Length[,500])
stat_compare_means(label = "p.format", paired = TRUE)
iris$Sepal.Length
qrf$outMatrixs$Sepal.Length[,500]
t.test(iris$Sepal.Length,qrf$outMatrixs$Sepal.Length[,500],paired = T)
stat_compare_means
?stat_compare_means
wilcox.test(iris$Sepal.Length,qrf$outMatrixs$Sepal.Length[,500],paired = T)
ggpaired(plot_in, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.1,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)
ggpaired(plot_in, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.1,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")
qrf$outMatrixs$Petal.Length[,500]
sort(qrf$outMatrixs$Petal.Length[,500])
iris
data = iris
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,tag = "predicted")
names(qrf$outMatrixs)
mutate(result_df,tag = "predicted")
result_df <- data.frame()
for (i in seq_along(qrf$outMatrixs)) {
temp_df <- as.data.frame(qrf$outMatrixs[[i]][,500])
if (nrow(result_df) == 0) {
result_df <- temp_df
} else {
result_df <- cbind(result_df, temp_df)
}
}
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,tag = "predicted")
numeric_features <- names(data)[sapply(data,is.numeric)]
data <- data[numeric_features]
data <- mutate(data,tag = "observed")
plot_in <-rbind(result_df,data)
plot_in_longer<- plot_in|>pivot_longer(!tag,names_to ="features",values_to ="value" )
ggpaired(plot_in_longer, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.1,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")
ggpaired(plot_in_longer, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")
ggpaired(plot_in_longer, x="tag", y="value",
color="tag", palette = "jco",
line.color = "grey", line.size =0.4,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.4,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")
iris_long = mutate(iris_long,value2 = 100*value)
data= iris
data
data$Sepal.Length=100*data$Sepal.Length
data
result_df <- data.frame()
for (i in seq_along(qrf$outMatrixs)) {
temp_df <- as.data.frame(qrf$outMatrixs[[i]][,500])
if (nrow(result_df) == 0) {
result_df <- temp_df
} else {
result_df <- cbind(result_df, temp_df)
}
}
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,tag = "predicted")
result_df
result_df$Sepal.Length=100*result_df$Sepal.Length
result_df
numeric_features <- names(data)[sapply(data,is.numeric)]
data <- data[numeric_features]
data <- mutate(data,tag = "observed")
plot_in <-rbind(result_df,data)
plot_in_longer<- plot_in|>pivot_longer(!tag,names_to ="features",values_to ="value" )
plot_in_longer
View(plot_in_longer)
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none",scales = "free")
ggplot(plot_in_longer, x="tag", y="value",fill="tag")+ggpaired(palette = "jco")
ggplot(data = palette = "jco", aes(x=tag, y=value,fill=tag))+ggpaired(palette = "jco")
ggplot(data = palette = "jco", aes(tag,value,fill=tag))+ggpaired(palette = "jco")
ggplot(data =plot_in_longer, aes(tag,value,fill=tag))+ggpaired(palette = "jco")
ggplot(data =plot_in_longer, aes(tag,value,fill=tag))+ggpaired(plot_in_longer,palette = "jco")
ggplot()+ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none",scales = "free")
ggplot()+ggpair(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none",scales = "free")
ggplot()+ggpar(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none",scales = "free")
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+ggpar()
p =ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))
p <- ggpubr::ggpar(p, theme = ggpubr::theme_pubr())
p
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+ggboxplot()
ggplot()+ggboxplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+geom_boxplot()
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+geom_boxplot()+facet_wrap(~features, scales = "free")
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+geom_boxplot()+facet_wrap(~features, scales = "free")+geom_signif()
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+geom_boxplot()+facet_wrap(~features, scales = "free")+geom_signif(comparisons = combine_vars())
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+geom_boxplot()+facet_wrap(~features, scales = "free")+geom_signif(comparisons = combine_vars(),y_position = y_pos)
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+geom_boxplot()+facet_wrap(~features, scales = "free")+geom_signif(comparisons = combine_vars,y_position = y_pos)
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+geom_boxplot()+facet_wrap(~features, scales = "free")+geom_signif(comparisons = combine_vars)
ggplot(data = plot_in_longer,aes(x=tag,y=value,fill=tag))+geom_boxplot()+facet_wrap(~features, scales = "free")
?ggpaired
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8,
facet.by = "features", short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8, short.panel.labs = FALSE)+stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")+facet_wrap(~features, scales = "free")
qrf$Data
library(ggpubr)
plot.outqrf<- function(qrf) {
result_df <- data.frame()
data <- qrf$Data
for (i in seq_along(qrf$outMatrixs)) {
temp_df <- as.data.frame(qrf$outMatrixs[[i]][,500])
if (nrow(result_df) == 0) {
result_df <- temp_df
} else {
result_df <- cbind(result_df, temp_df)
}
}
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,tag = "predicted")
numeric_features <- names(data)[sapply(data,is.numeric)]
data <- data[numeric_features]
data <- mutate(data,tag = "observed")
plot_in <-rbind(result_df,data)
plot_in_longer<- plot_in|>pivot_longer(!tag,names_to ="features",values_to ="value" )
p<- ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8, short.panel.labs = FALSE)+
stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")+facet_wrap(~features, scales = "free")
return(p)
}
plot(qrf)
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8, short.panel.labs = FALSE)+
stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")+facet_wrap(~features, scales = "free")
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8, width = 1,short.panel.labs = FALSE)+
stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")+facet_wrap(~features, scales = "free")
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8, width = 2,short.panel.labs = FALSE)+
stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")+facet_wrap(~features, scales = "free")
plot(qrf)
ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8, width = 0.8,short.panel.labs = FALSE)+
stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")+facet_wrap(~features, scales = "free")
plot.outqrf<- function(qrf) {
result_df <- data.frame()
data <- qrf$Data
for (i in seq_along(qrf$outMatrixs)) {
temp_df <- as.data.frame(qrf$outMatrixs[[i]][,500])
if (nrow(result_df) == 0) {
result_df <- temp_df
} else {
result_df <- cbind(result_df, temp_df)
}
}
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,tag = "predicted")
numeric_features <- names(data)[sapply(data,is.numeric)]
data <- data[numeric_features]
data <- mutate(data,tag = "observed")
plot_in <-rbind(result_df,data)
plot_in_longer<- plot_in|>pivot_longer(!tag,names_to ="features",values_to ="value" )
p<- ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8, width = 0.8,short.panel.labs = FALSE)+
stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")+facet_wrap(~features, scales = "free")
return(p)
}
plot(qrf)
usethis::use_package(package = "ggpubr", type = "Imports")
usethis::use_package(package = "tidyr", type = "Imports")
#' @title Plots outqrf
#' @description
#' This function can plot paired boxplot of an "outqrf" object.
#' It helps us to better observe the relationship between the original and predicted values
#' @param qrf An object of class "outqrf".
#' @returns A ggplot2 object
#' @export
#' @examples
#' irisWithOutliers <- generateOutliers(iris, seed = 2024)
#' qrf <- outqrf(irisWithOutliers)
#' plot(qrf)
plot.outqrf<- function(qrf) {
result_df <- data.frame()
data <- qrf$Data
for (i in seq_along(qrf$outMatrixs)) {
temp_df <- as.data.frame(qrf$outMatrixs[[i]][,500])
if (nrow(result_df) == 0) {
result_df <- temp_df
} else {
result_df <- cbind(result_df, temp_df)
}
}
names(result_df) = names(qrf$outMatrixs)
result_df <- mutate(result_df,tag = "predicted")
numeric_features <- names(data)[sapply(data,is.numeric)]
data <- data[numeric_features]
data <- mutate(data,tag = "observed")
plot_in <-rbind(result_df,data)
plot_in_longer<- plot_in|>pivot_longer(!tag,names_to ="features",values_to ="value" )
p<- ggpubr::ggpaired(plot_in_longer, x="tag", y="value",
fill="tag", palette = "jco",
line.color = "grey", line.size =0.8, width = 0.4,short.panel.labs = FALSE)+
stat_compare_means(label = "p.format", paired = TRUE)+theme(legend.position = "none")+facet_wrap(~features, scales = "free")
return(p)
}
plot(qrf)
irisWithOutliers <- outqrf::generateOutliers(iris, p = 0.05,seed =2024)
boxplot_num = 0
for (i in names(irisWithOutliers)[sapply(irisWithOutliers,is.numeric)]){
q1 <- quantile(irisWithOutliers[,i], 0.25)
q3 <- quantile(irisWithOutliers[,i], 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
num <- sum(irisWithOutliers[,i]<lower_bound|irisWithOutliers[,i]>upper_bound)
boxplot_num<-boxplot_num+num
}
boxplot_num
irisWithOutliers <- outqrf::generateOutliers(iris, p = 0.05,seed =2024)
boxplot_num = 0
for (i in names(irisWithOutliers)[sapply(irisWithOutliers,is.numeric)]){
q1 <- quantile(irisWithOutliers[,i], 0.25)
q3 <- quantile(irisWithOutliers[,i], 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
num <- sum(irisWithOutliers[,i]<lower_bound|irisWithOutliers[,i]>upper_bound)
boxplot_num<-boxplot_num+num
}
boxplot_num
irisWithOutliers <- outqrf::generateOutliers(iris, p = 0.05,seed =2024)
boxplot_num = 0
for (i in names(irisWithOutliers)[sapply(irisWithOutliers,is.numeric)]){
q1 <- quantile(irisWithOutliers[,i], 0.25)
q3 <- quantile(irisWithOutliers[,i], 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
num <- sum(irisWithOutliers[,i]<lower_bound|irisWithOutliers[,i]>upper_bound)
boxplot_num<-boxplot_num+num
}
boxplot_num
plot(qrf)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
setwd("E:/github/outqrf")
setwd("E:/github/outqrf")
pkgdown::build_site()
